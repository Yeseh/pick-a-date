import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { trpc } from "../../utils/trpc";
import { dayPartKeys, dayKeys, setCheckboxArray } from "../../utils";

const formDataDefault = {
  subject: "",
  minParticipants: 1,
  maxParticipants: 2,
  maxOptions: 4,
  autoPick: false,
};

const Page: NextPage = () => {
  const router = useRouter();
  const [days, setDays] = useState([
    false,
    false,
    false,
    false,
    false,
    false,
    false,
  ]);
  const [dayParts, setDayParts] = useState([false, false, false]);
  const [formData, setFormData] = useState(formDataDefault);
  const createPad = trpc.useMutation(["pad.create"]);

  const handleInput = (e: any) => {
    const fieldName = e.target.name;
    const fieldValue = e.target.value;

    setFormData((state) => ({
      ...state,
      [fieldName]: fieldValue,
    }));
  };

  const onCreatePad = async (e: any) => {
    const red = await createPad.mutateAsync({
      subject: formData.subject,
      rootDate: new Date(),

      possibleDayParts: dayParts
        .map((d, i) => {
          if (d) {
            return dayPartKeys[i];
          }
        })
        .filter((x) => x) as any[],

      possibleDays: days
        .map((d, i) => {
          if (d) {
            return dayKeys[i];
          }
        })
        .filter((x) => x) as any[],

      minParticipants: formData.minParticipants,
      maxParticipants: formData.maxParticipants,
      optionsAmount: formData.maxOptions,
      autoPickWhenMinReached: formData.autoPick,
    });

    await router.replace(red.redirect);
  };

  return (
    <>
      <Head>
        <title>Pick A Date</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Pick A <span className="text-purple-300">Date</span>
        </h1>
        <label htmlFor="subject">Subject</label>
        <input
          id="subject"
          type="text"
          name="subject"
          value={formData.subject}
          onChange={handleInput}
        />
        <label htmlFor="minParticipants">Min. Participants</label>
        <input
          id="maxParticipants"
          type="number"
          name="maxParticipants"
          value={formData.maxParticipants}
          onChange={handleInput}
        />
        <label htmlFor="maxParticipants">Min. Participants</label>
        <input
          id="minParticipants"
          type="number"
          name="minParticipants"
          value={formData.minParticipants}
          onChange={handleInput}
        />
        <label htmlFor="maxOptions">Max. Options</label>
        <input
          id="maxOptions"
          type="number"
          name="maxOptions"
          value={formData.maxOptions}
          onChange={handleInput}
        />
        <h2 className="text-s md:text-[2rem] leading-normal font-extrabold text-gray-700">
          Which <span className="text-purple-300">Day Parts</span>?
        </h2>
        <div className="grid gap-3 pt-4 mt-2 text-center md:grid-cols-3 lg:w-2/3">
          {dayPartKeys.map((part, idx) => (
            <span key={idx}>
              <input
                id={part}
                type="checkbox"
                name={part}
                checked={dayParts[idx]}
                onChange={(e) =>
                  setCheckboxArray(e, dayParts, idx, setDayParts)
                }
              />
              <label htmlFor={part}>{part}</label>
            </span>
          ))}
        </div>
        <h2 className="text-s md:text-[2rem] leading-normal font-extrabold text-gray-700">
          Which <span className="text-purple-300">Days</span>?
        </h2>
        <div className="grid gap-3 pt-1 mt-1 text-center md:grid-cols-3 lg:w-2/3">
          {dayKeys.map((day, idx) => (
            <span key={idx}>
              <input
                id={day}
                type="checkbox"
                name={day}
                checked={days[idx]}
                onChange={(e) => setCheckboxArray(e, days, idx, setDays)}
              />
              <label htmlFor={day}>{day}</label>
            </span>
          ))}
        </div>

        <input
          id="createPadBtn"
          value="Create"
          type="button"
          onClick={onCreatePad}
        />
      </main>
    </>
  );
};

export default Page;
