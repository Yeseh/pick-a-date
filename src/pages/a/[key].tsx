import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../../utils/trpc";
import Link from "next/link";
import { useRouter } from "next/router";

type TechnologyCardProps = {
  name: string;
  description: string;
  link: string;
};

const Home: NextPage = () => {
  const router = useRouter();
  const { key } = router.query as { key: string };

  const getPad = trpc.useQuery(["pad.getWithAnswers", { key }]);
  const pad = getPad?.data;

  if (!pad || getPad.isLoading) {
    return (
      <main>
        <div>
          <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
            Loading <span className="text-purple-300">Date</span>...
          </h1>
        </div>
      </main>
    );
  }

  const answered = new Set(pad!.answers.map((a) => a.submissionKey) ?? []);
  // <dateKey-dayPart>: count
  const answerCounts = new Map();

  for (const a of pad.answers) {
    for (const dp of a.dayParts.filter((d) => d !== "none")) {
      const answerKey = `${a.dateKey}-${dp}`;
      if (!answerCounts.has(answerKey)) {
        answerCounts.set(answerKey, 1);
        continue;
      }

      const currentValue = answerCounts.get(answerKey);
      answerCounts.set(answerKey, currentValue + 1);
    }
  }

  const finalCounts = [] as any[];
  for (const [k, v] of answerCounts.entries()) {
    finalCounts.push({ dateKey: k, count: v });
  }

  finalCounts.sort((a, b) => {
    if (a > b) return -1;
    if (b > a) return 1;
    return 0;
  });

  return (
    <>
      <Head>
        <title>Pick A Date</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h3 className="text-4xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          <span className="text-purple-300">{answered.size}</span>/
          {pad.maxParticipants} have signed up!
        </h3>
        {finalCounts.map((c) => (
          <h3
            className="text-4xl md:text-[3rem] leading-normal font-extrabold text-gray-700"
            key={c.dateKey}
          >
            {c.dateKey}: {c.count}
          </h3>
        ))}
      </main>
    </>
  );
};

const Card = ({ name, description, link }: TechnologyCardProps) => {
  return (
    <Link href={link}>
      <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
        <h2 className="text-lg text-gray-700">{name}</h2>
        <p className="text-sm text-gray-600">{description}</p>
      </section>
    </Link>
  );
};

export default Home;
