import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../../utils/trpc";
import { useRouter } from "next/router";
import { Card } from "../../components/card";
import { format } from "date-fns";
import { PartOfDay } from "@prisma/client";
import { dateEquals, dateOnly } from "../../utils";

const Home: NextPage = () => {
  const router = useRouter();
  const { key } = router.query as { key: string };

  const getPad = trpc.useQuery(["pad.getWithAnswers", { key }]);
  const pad = getPad?.data;

  if (!pad || getPad.isLoading) {
    return (
      <main>
        <div>
          <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
            Loading <span className="text-purple-300">Date</span>...
          </h1>
        </div>
      </main>
    );
  }

  //TODO: Clean up this mess from here
  const answered = new Set(
    pad!.answers.map((a) => a.submissionKey + a.padId) ?? []
  );
  // <dateKey-dayPart>: count
  const answerCounts: Record<string, number> = {};

  for (const a of pad.answers) {
    for (const dp of a.dayParts.filter((d) => d !== "none")) {
      const answerKey = `${a.date.toISOString()}|${dp}`;

      if (!answerCounts[answerKey]) {
        answerCounts[answerKey] = 0;
      }

      answerCounts[answerKey]++;
    }
  }

  // TODO parameterize top count
  const top3 = Object.entries({ ...answerCounts })
    .sort((a, b) => {
      if (a[1] > b[1]) return -1;
      if (b[1] > a[1]) return 1;
      return 0;
    })
    .slice(0, 3);

  const answerView = [] as any[];
  for (const a of top3) {
    const count = a[1] as number;
    const keyParts = a[0]!.split("|");
    const keyDate = dateOnly(new Date(keyParts[0]!));
    const dayPart = keyParts[1];
    const votes = pad.answers
      .filter(
        (a) =>
          dateEquals(a.date, keyDate) &&
          a.dayParts.includes(dayPart as PartOfDay)
      )
      .map((a) => a.name);

    answerView.push({
      key: a[0],
      count,
      percentage: Math.floor((count / answered.size) * 100),
      dateFmt: format(keyDate, "eeee, MMMM do"),
      voters: pad.anonymous
        ? "This vote was anonymous"
        : `Available: ${votes.join(", ")}`,
    });
    // Formatted-date : percentage votes [favorite!]
    // People that voted available on that datepart (if not anonymous)
  }

  return (
    <>
      <Head>
        <title>Pick A Date</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h3 className="text-4xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          <span className="text-purple-300">{answered.size}</span>/
          {pad.maxParticipants} have signed up!
        </h3>
        <h3 className="text-4xl pb-6 md:text-[3rem] leading-normal font-extrabold text-gray-700">
          Your top <span className="text-purple-300">3</span> so far:
        </h3>
        {answerView.map((c) => (
          <div key={c.key}>
            <div className="container w-80 pb-5">
              <Card
                name={`${c.dateFmt}: ${c.percentage}%`}
                description={c.voters}
              ></Card>
            </div>
          </div>
        ))}
      </main>
    </>
  );
};

export default Home;
