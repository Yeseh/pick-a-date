import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { dayKeys } from "../utils";
import { add } from "date-fns";
import Link from "next/link";
import { useRouter } from "next/router";

type CardProps = {
  name: string;
  description: string;
  template?: string;
};

const templates = {
  dinnerwith4: {
    subject: "Dinner",
    rootDate: new Date(),
    possibleDayParts: ["night"],
    possibleDays: dayKeys,
    minParticipants: 4,
    maxParticipants: 4,
    optionsAmount: 7,
    autoPickWhenMinReached: false,
  },
  hotDate: {
    subject: "Date Night",
    rootDate: new Date(),
    possibleDayParts: ["night"],
    possibleDays: dayKeys,
    minParticipants: 2,
    maxParticipants: 2,
    optionsAmount: 3,
    autoPickWhenMinReached: false,
  },
  weekendLunch: {
    subject: "Weekend Lunch",
    rootDate: new Date(),
    possibleDayParts: ["morning", "day"],
    possibleDays: ["saturday", "sunday"],
    minParticipants: 2,
    maxParticipants: 0,
    optionsAmount: 4,
    autoPickWhenMinReached: false,
  },
};

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Pick A Date</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Dash <span className="text-purple-300">Date</span>
        </h1>
        <h1 className="text-5xl md:text-[2rem] leading-normal font-extrabold text-gray-700">
          <span className="text-purple-300">Pick a</span> Template
        </h1>
        <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-1 lg:w-2/3">
          <TemplateCard
            name="Blank"
            description="Try to plan something yourself"
          />
          <TemplateCard
            name="Dinner with 4"
            description="Weeknight dinner with four friends, in the coming week!"
            template="dinnerwith4"
          />
          <TemplateCard
            name="Weekend lunch"
            description="Spontaneous weekend lunch with an entire group"
            template="weekendLunch"
          />
          <TemplateCard
            name="Steamy Date"
            description="Impress your new (or current) SO"
            template="hotDate"
          />
        </div>
      </main>
    </>
  );
};

const TemplateCard = ({ name, description, template }: CardProps) => {
  const createPad = trpc.useMutation("pad.create");
  const router = useRouter();

  const createTemplate = async (template: string) => {
    const tpl = templates[template];
    if (tpl) {
      const red = await createPad.mutateAsync(tpl);
      router.replace(red.redirect);
    } else {
      alert("unknown template" + template);
    }
  };

  const base = (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
    </section>
  );

  if (template) {
    return <a onClick={(e) => createTemplate(template)}>{base}</a>;
  }

  return <Link href="/d">{base}</Link>;
};

export default Home;
